// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolUpdate extends ethereum.Event {
  get params(): PoolUpdate__Params {
    return new PoolUpdate__Params(this);
  }
}

export class PoolUpdate__Params {
  _event: PoolUpdate;

  constructor(event: PoolUpdate) {
    this._event = event;
  }

  get pool(): PoolUpdatePoolStruct {
    return changetype<PoolUpdatePoolStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class PoolUpdatePoolStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get yieldTokenIndex(): BigInt {
    return this[8].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[9].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[10].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[11].toBigInt();
  }

  get totalYield(): BigInt {
    return this[12].toBigInt();
  }

  get apy(): PoolUpdatePoolApyStruct {
    return changetype<PoolUpdatePoolApyStruct>(this[13].toTuple());
  }
}

export class PoolUpdatePoolApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class SupplierEvent extends ethereum.Event {
  get params(): SupplierEvent__Params {
    return new SupplierEvent__Params(this);
  }
}

export class SupplierEvent__Params {
  _event: SupplierEvent;

  constructor(event: SupplierEvent) {
    this._event = event;
  }

  get supplierEvent(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get payload(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestmap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get supplier(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SupplierUpdate extends ethereum.Event {
  get params(): SupplierUpdate__Params {
    return new SupplierUpdate__Params(this);
  }
}

export class SupplierUpdate__Params {
  _event: SupplierUpdate;

  constructor(event: SupplierUpdate) {
    this._event = event;
  }

  get supplier(): SupplierUpdateSupplierStruct {
    return changetype<SupplierUpdateSupplierStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class SupplierUpdateSupplierStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get supplier(): Address {
    return this[1].toAddress();
  }

  get cumulatedYield(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get eventId(): BigInt {
    return this[6].toBigInt();
  }

  get inStream(): SupplierUpdateSupplierInStreamStruct {
    return changetype<SupplierUpdateSupplierInStreamStruct>(this[7].toTuple());
  }

  get outStream(): SupplierUpdateSupplierOutStreamStruct {
    return changetype<SupplierUpdateSupplierOutStreamStruct>(this[8].toTuple());
  }

  get apy(): SupplierUpdateSupplierApyStruct {
    return changetype<SupplierUpdateSupplierApyStruct>(this[9].toTuple());
  }
}

export class SupplierUpdateSupplierInStreamStruct extends ethereum.Tuple {
  get flow(): BigInt {
    return this[0].toBigInt();
  }

  get cancelFlowId(): Bytes {
    return this[1].toBytes();
  }
}

export class SupplierUpdateSupplierOutStreamStruct extends ethereum.Tuple {
  get flow(): BigInt {
    return this[0].toBigInt();
  }

  get cancelFlowId(): Bytes {
    return this[1].toBytes();
  }

  get stepAmount(): BigInt {
    return this[2].toBigInt();
  }

  get stepTime(): BigInt {
    return this[3].toBigInt();
  }

  get initTime(): BigInt {
    return this[4].toBigInt();
  }

  get minBalance(): BigInt {
    return this[5].toBigInt();
  }

  get cancelWithdrawId(): Bytes {
    return this[6].toBytes();
  }
}

export class SupplierUpdateSupplierApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolV1__getLastPoolResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get yieldTokenIndex(): BigInt {
    return this[8].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[9].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[10].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[11].toBigInt();
  }

  get totalYield(): BigInt {
    return this[12].toBigInt();
  }

  get apy(): PoolV1__getLastPoolResultValue0ApyStruct {
    return changetype<PoolV1__getLastPoolResultValue0ApyStruct>(
      this[13].toTuple()
    );
  }
}

export class PoolV1__getLastPoolResultValue0ApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolV1__getPoolResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get yieldTokenIndex(): BigInt {
    return this[8].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[9].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[10].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[11].toBigInt();
  }

  get totalYield(): BigInt {
    return this[12].toBigInt();
  }

  get apy(): PoolV1__getPoolResultValue0ApyStruct {
    return changetype<PoolV1__getPoolResultValue0ApyStruct>(this[13].toTuple());
  }
}

export class PoolV1__getPoolResultValue0ApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolV1 extends ethereum.SmartContract {
  static bind(address: Address): PoolV1 {
    return new PoolV1("PoolV1", address);
  }

  ETH(): Address {
    let result = super.call("ETH", "ETH():(address)", []);

    return result[0].toAddress();
  }

  try_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH", "ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  cfa(): Address {
    let result = super.call("cfa", "cfa():(address)", []);

    return result[0].toAddress();
  }

  try_cfa(): ethereum.CallResult<Address> {
    let result = super.tryCall("cfa", "cfa():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gelato(): Address {
    let result = super.call("gelato", "gelato():(address)", []);

    return result[0].toAddress();
  }

  try_gelato(): ethereum.CallResult<Address> {
    let result = super.tryCall("gelato", "gelato():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLastPool(): PoolV1__getLastPoolResultValue0Struct {
    let result = super.call(
      "getLastPool",
      "getLastPool():((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256)))",
      []
    );

    return changetype<PoolV1__getLastPoolResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getLastPool(): ethereum.CallResult<
    PoolV1__getLastPoolResultValue0Struct
  > {
    let result = super.tryCall(
      "getLastPool",
      "getLastPool():((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256)))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getLastPoolResultValue0Struct>(value[0].toTuple())
    );
  }

  getPool(timestamp: BigInt): PoolV1__getPoolResultValue0Struct {
    let result = super.call(
      "getPool",
      "getPool(uint256):((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return changetype<PoolV1__getPoolResultValue0Struct>(result[0].toTuple());
  }

  try_getPool(
    timestamp: BigInt
  ): ethereum.CallResult<PoolV1__getPoolResultValue0Struct> {
    let result = super.tryCall(
      "getPool",
      "getPool(uint256):((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getPoolResultValue0Struct>(value[0].toTuple())
    );
  }

  host(): Address {
    let result = super.call("host", "host():(address)", []);

    return result[0].toAddress();
  }

  try_host(): ethereum.CallResult<Address> {
    let result = super.tryCall("host", "host():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastPoolTimestamp(): BigInt {
    let result = super.call(
      "lastPoolTimestamp",
      "lastPoolTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastPoolTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastPoolTimestamp",
      "lastPoolTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ops(): Address {
    let result = super.call("ops", "ops():(address)", []);

    return result[0].toAddress();
  }

  try_ops(): ethereum.CallResult<Address> {
    let result = super.tryCall("ops", "ops():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sfDeleteFlowWithCtx(_ctx: Bytes, sender: Address, receiver: Address): Bytes {
    let result = super.call(
      "sfDeleteFlowWithCtx",
      "sfDeleteFlowWithCtx(bytes,address,address):(bytes)",
      [
        ethereum.Value.fromBytes(_ctx),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver)
      ]
    );

    return result[0].toBytes();
  }

  try_sfDeleteFlowWithCtx(
    _ctx: Bytes,
    sender: Address,
    receiver: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "sfDeleteFlowWithCtx",
      "sfDeleteFlowWithCtx(bytes,address,address):(bytes)",
      [
        ethereum.Value.fromBytes(_ctx),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  withdraw(): boolean {
    let result = super.call("withdraw", "withdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CloseAccountCall extends ethereum.Call {
  get inputs(): CloseAccountCall__Inputs {
    return new CloseAccountCall__Inputs(this);
  }

  get outputs(): CloseAccountCall__Outputs {
    return new CloseAccountCall__Outputs(this);
  }
}

export class CloseAccountCall__Inputs {
  _call: CloseAccountCall;

  constructor(call: CloseAccountCall) {
    this._call = call;
  }
}

export class CloseAccountCall__Outputs {
  _call: CloseAccountCall;

  constructor(call: CloseAccountCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _host(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _superToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeAfterSettingsCall extends ethereum.Call {
  get inputs(): InitializeAfterSettingsCall__Inputs {
    return new InitializeAfterSettingsCall__Inputs(this);
  }

  get outputs(): InitializeAfterSettingsCall__Outputs {
    return new InitializeAfterSettingsCall__Outputs(this);
  }
}

export class InitializeAfterSettingsCall__Inputs {
  _call: InitializeAfterSettingsCall;

  constructor(call: InitializeAfterSettingsCall) {
    this._call = call;
  }

  get _resolverSettings(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeAfterSettingsCall__Outputs {
  _call: InitializeAfterSettingsCall;

  constructor(call: InitializeAfterSettingsCall) {
    this._call = call;
  }
}

export class RedeemDepositCall extends ethereum.Call {
  get inputs(): RedeemDepositCall__Inputs {
    return new RedeemDepositCall__Inputs(this);
  }

  get outputs(): RedeemDepositCall__Outputs {
    return new RedeemDepositCall__Outputs(this);
  }
}

export class RedeemDepositCall__Inputs {
  _call: RedeemDepositCall;

  constructor(call: RedeemDepositCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemDepositCall__Outputs {
  _call: RedeemDepositCall;

  constructor(call: RedeemDepositCall) {
    this._call = call;
  }
}

export class RedeemFlowCall extends ethereum.Call {
  get inputs(): RedeemFlowCall__Inputs {
    return new RedeemFlowCall__Inputs(this);
  }

  get outputs(): RedeemFlowCall__Outputs {
    return new RedeemFlowCall__Outputs(this);
  }
}

export class RedeemFlowCall__Inputs {
  _call: RedeemFlowCall;

  constructor(call: RedeemFlowCall) {
    this._call = call;
  }

  get _outFlowRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemFlowCall__Outputs {
  _call: RedeemFlowCall;

  constructor(call: RedeemFlowCall) {
    this._call = call;
  }
}

export class RedeemFlowStopCall extends ethereum.Call {
  get inputs(): RedeemFlowStopCall__Inputs {
    return new RedeemFlowStopCall__Inputs(this);
  }

  get outputs(): RedeemFlowStopCall__Outputs {
    return new RedeemFlowStopCall__Outputs(this);
  }
}

export class RedeemFlowStopCall__Inputs {
  _call: RedeemFlowStopCall;

  constructor(call: RedeemFlowStopCall) {
    this._call = call;
  }
}

export class RedeemFlowStopCall__Outputs {
  _call: RedeemFlowStopCall;

  constructor(call: RedeemFlowStopCall) {
    this._call = call;
  }
}

export class SfCreateFlowCall extends ethereum.Call {
  get inputs(): SfCreateFlowCall__Inputs {
    return new SfCreateFlowCall__Inputs(this);
  }

  get outputs(): SfCreateFlowCall__Outputs {
    return new SfCreateFlowCall__Outputs(this);
  }
}

export class SfCreateFlowCall__Inputs {
  _call: SfCreateFlowCall;

  constructor(call: SfCreateFlowCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOutFlow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SfCreateFlowCall__Outputs {
  _call: SfCreateFlowCall;

  constructor(call: SfCreateFlowCall) {
    this._call = call;
  }
}

export class SfDeleteFlowCall extends ethereum.Call {
  get inputs(): SfDeleteFlowCall__Inputs {
    return new SfDeleteFlowCall__Inputs(this);
  }

  get outputs(): SfDeleteFlowCall__Outputs {
    return new SfDeleteFlowCall__Outputs(this);
  }
}

export class SfDeleteFlowCall__Inputs {
  _call: SfDeleteFlowCall;

  constructor(call: SfDeleteFlowCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SfDeleteFlowCall__Outputs {
  _call: SfDeleteFlowCall;

  constructor(call: SfDeleteFlowCall) {
    this._call = call;
  }
}

export class SfDeleteFlowWithCtxCall extends ethereum.Call {
  get inputs(): SfDeleteFlowWithCtxCall__Inputs {
    return new SfDeleteFlowWithCtxCall__Inputs(this);
  }

  get outputs(): SfDeleteFlowWithCtxCall__Outputs {
    return new SfDeleteFlowWithCtxCall__Outputs(this);
  }
}

export class SfDeleteFlowWithCtxCall__Inputs {
  _call: SfDeleteFlowWithCtxCall;

  constructor(call: SfDeleteFlowWithCtxCall) {
    this._call = call;
  }

  get _ctx(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SfDeleteFlowWithCtxCall__Outputs {
  _call: SfDeleteFlowWithCtxCall;

  constructor(call: SfDeleteFlowWithCtxCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SfUpdateFlowCall extends ethereum.Call {
  get inputs(): SfUpdateFlowCall__Inputs {
    return new SfUpdateFlowCall__Inputs(this);
  }

  get outputs(): SfUpdateFlowCall__Outputs {
    return new SfUpdateFlowCall__Outputs(this);
  }
}

export class SfUpdateFlowCall__Inputs {
  _call: SfUpdateFlowCall;

  constructor(call: SfUpdateFlowCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOutFlow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SfUpdateFlowCall__Outputs {
  _call: SfUpdateFlowCall;

  constructor(call: SfUpdateFlowCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferSuperTokenCall extends ethereum.Call {
  get inputs(): TransferSuperTokenCall__Inputs {
    return new TransferSuperTokenCall__Inputs(this);
  }

  get outputs(): TransferSuperTokenCall__Outputs {
    return new TransferSuperTokenCall__Outputs(this);
  }
}

export class TransferSuperTokenCall__Inputs {
  _call: TransferSuperTokenCall;

  constructor(call: TransferSuperTokenCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferSuperTokenCall__Outputs {
  _call: TransferSuperTokenCall;

  constructor(call: TransferSuperTokenCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
