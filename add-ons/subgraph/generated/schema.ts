// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Supplier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("supplier", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("createdTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("deposit", Value.fromBigInt(BigInt.zero()));
    this.set("cumulatedYield", Value.fromBigInt(BigInt.zero()));
    this.set("inFlow", Value.fromBigInt(BigInt.zero()));
    this.set("outFlow", Value.fromBigInt(BigInt.zero()));
    this.set("outStepAmount", Value.fromBigInt(BigInt.zero()));
    this.set("outStepTime", Value.fromBigInt(BigInt.zero()));
    this.set("outInitTime", Value.fromBigInt(BigInt.zero()));
    this.set("outMinBalance", Value.fromBigInt(BigInt.zero()));
    this.set("outCancelWithdrawId", Value.fromString(""));
    this.set("apySpan", Value.fromBigInt(BigInt.zero()));
    this.set("apy", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Supplier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Supplier entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Supplier", id.toString(), this);
    }
  }

  static load(id: string): Supplier | null {
    return changetype<Supplier | null>(store.get("Supplier", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get supplier(): string {
    let value = this.get("supplier");
    return value!.toString();
  }

  set supplier(value: string) {
    this.set("supplier", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    return value!.toBigInt();
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get cumulatedYield(): BigInt {
    let value = this.get("cumulatedYield");
    return value!.toBigInt();
  }

  set cumulatedYield(value: BigInt) {
    this.set("cumulatedYield", Value.fromBigInt(value));
  }

  get inFlow(): BigInt {
    let value = this.get("inFlow");
    return value!.toBigInt();
  }

  set inFlow(value: BigInt) {
    this.set("inFlow", Value.fromBigInt(value));
  }

  get outFlow(): BigInt {
    let value = this.get("outFlow");
    return value!.toBigInt();
  }

  set outFlow(value: BigInt) {
    this.set("outFlow", Value.fromBigInt(value));
  }

  get outStepAmount(): BigInt {
    let value = this.get("outStepAmount");
    return value!.toBigInt();
  }

  set outStepAmount(value: BigInt) {
    this.set("outStepAmount", Value.fromBigInt(value));
  }

  get outStepTime(): BigInt {
    let value = this.get("outStepTime");
    return value!.toBigInt();
  }

  set outStepTime(value: BigInt) {
    this.set("outStepTime", Value.fromBigInt(value));
  }

  get outInitTime(): BigInt {
    let value = this.get("outInitTime");
    return value!.toBigInt();
  }

  set outInitTime(value: BigInt) {
    this.set("outInitTime", Value.fromBigInt(value));
  }

  get outMinBalance(): BigInt {
    let value = this.get("outMinBalance");
    return value!.toBigInt();
  }

  set outMinBalance(value: BigInt) {
    this.set("outMinBalance", Value.fromBigInt(value));
  }

  get outCancelWithdrawId(): string {
    let value = this.get("outCancelWithdrawId");
    return value!.toString();
  }

  set outCancelWithdrawId(value: string) {
    this.set("outCancelWithdrawId", Value.fromString(value));
  }

  get apySpan(): BigInt {
    let value = this.get("apySpan");
    return value!.toBigInt();
  }

  set apySpan(value: BigInt) {
    this.set("apySpan", Value.fromBigInt(value));
  }

  get apy(): BigInt {
    let value = this.get("apy");
    return value!.toBigInt();
  }

  set apy(value: BigInt) {
    this.set("apy", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("deposit", Value.fromBigInt(BigInt.zero()));
    this.set("depositFromInflowRate", Value.fromBigInt(BigInt.zero()));
    this.set("inFlowRate", Value.fromBigInt(BigInt.zero()));
    this.set("outFlowRate", Value.fromBigInt(BigInt.zero()));
    this.set("outFlowBuffer", Value.fromBigInt(BigInt.zero()));
    this.set("yieldTokenIndex", Value.fromBigInt(BigInt.zero()));
    this.set("yieldInFlowRateIndex", Value.fromBigInt(BigInt.zero()));
    this.set("yieldAccrued", Value.fromBigInt(BigInt.zero()));
    this.set("yieldSnapshot", Value.fromBigInt(BigInt.zero()));
    this.set("totalYield", Value.fromBigInt(BigInt.zero()));
    this.set("protocolYield", Value.fromBigInt(BigInt.zero()));
    this.set("nrSuppliers", Value.fromBigInt(BigInt.zero()));
    this.set("apySpan", Value.fromBigInt(BigInt.zero()));
    this.set("apy", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    return value!.toBigInt();
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get depositFromInflowRate(): BigInt {
    let value = this.get("depositFromInflowRate");
    return value!.toBigInt();
  }

  set depositFromInflowRate(value: BigInt) {
    this.set("depositFromInflowRate", Value.fromBigInt(value));
  }

  get inFlowRate(): BigInt {
    let value = this.get("inFlowRate");
    return value!.toBigInt();
  }

  set inFlowRate(value: BigInt) {
    this.set("inFlowRate", Value.fromBigInt(value));
  }

  get outFlowRate(): BigInt {
    let value = this.get("outFlowRate");
    return value!.toBigInt();
  }

  set outFlowRate(value: BigInt) {
    this.set("outFlowRate", Value.fromBigInt(value));
  }

  get outFlowBuffer(): BigInt {
    let value = this.get("outFlowBuffer");
    return value!.toBigInt();
  }

  set outFlowBuffer(value: BigInt) {
    this.set("outFlowBuffer", Value.fromBigInt(value));
  }

  get yieldTokenIndex(): BigInt {
    let value = this.get("yieldTokenIndex");
    return value!.toBigInt();
  }

  set yieldTokenIndex(value: BigInt) {
    this.set("yieldTokenIndex", Value.fromBigInt(value));
  }

  get yieldInFlowRateIndex(): BigInt {
    let value = this.get("yieldInFlowRateIndex");
    return value!.toBigInt();
  }

  set yieldInFlowRateIndex(value: BigInt) {
    this.set("yieldInFlowRateIndex", Value.fromBigInt(value));
  }

  get yieldAccrued(): BigInt {
    let value = this.get("yieldAccrued");
    return value!.toBigInt();
  }

  set yieldAccrued(value: BigInt) {
    this.set("yieldAccrued", Value.fromBigInt(value));
  }

  get yieldSnapshot(): BigInt {
    let value = this.get("yieldSnapshot");
    return value!.toBigInt();
  }

  set yieldSnapshot(value: BigInt) {
    this.set("yieldSnapshot", Value.fromBigInt(value));
  }

  get totalYield(): BigInt {
    let value = this.get("totalYield");
    return value!.toBigInt();
  }

  set totalYield(value: BigInt) {
    this.set("totalYield", Value.fromBigInt(value));
  }

  get protocolYield(): BigInt {
    let value = this.get("protocolYield");
    return value!.toBigInt();
  }

  set protocolYield(value: BigInt) {
    this.set("protocolYield", Value.fromBigInt(value));
  }

  get nrSuppliers(): BigInt {
    let value = this.get("nrSuppliers");
    return value!.toBigInt();
  }

  set nrSuppliers(value: BigInt) {
    this.set("nrSuppliers", Value.fromBigInt(value));
  }

  get apySpan(): BigInt {
    let value = this.get("apySpan");
    return value!.toBigInt();
  }

  set apySpan(value: BigInt) {
    this.set("apySpan", Value.fromBigInt(value));
  }

  get apy(): BigInt {
    let value = this.get("apy");
    return value!.toBigInt();
  }

  set apy(value: BigInt) {
    this.set("apy", Value.fromBigInt(value));
  }
}

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("event", Value.fromBigInt(BigInt.zero()));
    this.set("payload", Value.fromBytes(Bytes.empty()));
    this.set("supplier", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Event entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Event entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Event", id.toString(), this);
    }
  }

  static load(id: string): Event | null {
    return changetype<Event | null>(store.get("Event", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): BigInt {
    let value = this.get("event");
    return value!.toBigInt();
  }

  set event(value: BigInt) {
    this.set("event", Value.fromBigInt(value));
  }

  get payload(): Bytes {
    let value = this.get("payload");
    return value!.toBytes();
  }

  set payload(value: Bytes) {
    this.set("payload", Value.fromBytes(value));
  }

  get supplier(): string {
    let value = this.get("supplier");
    return value!.toString();
  }

  set supplier(value: string) {
    this.set("supplier", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
