// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CodeUpdated extends ethereum.Event {
  get params(): CodeUpdated__Params {
    return new CodeUpdated__Params(this);
  }
}

export class CodeUpdated__Params {
  _event: CodeUpdated;

  constructor(event: CodeUpdated) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get codeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PoolUpdate extends ethereum.Event {
  get params(): PoolUpdate__Params {
    return new PoolUpdate__Params(this);
  }
}

export class PoolUpdate__Params {
  _event: PoolUpdate;

  constructor(event: PoolUpdate) {
    this._event = event;
  }

  get pool(): PoolUpdatePoolStruct {
    return changetype<PoolUpdatePoolStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class PoolUpdatePoolStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get yieldObject(): PoolUpdatePoolYieldObjectStruct {
    return changetype<PoolUpdatePoolYieldObjectStruct>(this[8].toTuple());
  }

  get apy(): PoolUpdatePoolApyStruct {
    return changetype<PoolUpdatePoolApyStruct>(this[9].toTuple());
  }
}

export class PoolUpdatePoolYieldObjectStruct extends ethereum.Tuple {
  get yieldTokenIndex(): BigInt {
    return this[0].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[1].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[2].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[3].toBigInt();
  }

  get totalYield(): BigInt {
    return this[4].toBigInt();
  }

  get protocolYield(): BigInt {
    return this[5].toBigInt();
  }
}

export class PoolUpdatePoolApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class SupplierEvent extends ethereum.Event {
  get params(): SupplierEvent__Params {
    return new SupplierEvent__Params(this);
  }
}

export class SupplierEvent__Params {
  _event: SupplierEvent;

  constructor(event: SupplierEvent) {
    this._event = event;
  }

  get supplierEvent(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get payload(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestmap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get supplier(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SupplierUpdate extends ethereum.Event {
  get params(): SupplierUpdate__Params {
    return new SupplierUpdate__Params(this);
  }
}

export class SupplierUpdate__Params {
  _event: SupplierUpdate;

  constructor(event: SupplierUpdate) {
    this._event = event;
  }

  get supplier(): SupplierUpdateSupplierStruct {
    return changetype<SupplierUpdateSupplierStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class SupplierUpdateSupplierStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get supplier(): Address {
    return this[1].toAddress();
  }

  get cumulatedYield(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get eventId(): BigInt {
    return this[6].toBigInt();
  }

  get inStream(): BigInt {
    return this[7].toBigInt();
  }

  get outStream(): SupplierUpdateSupplierOutStreamStruct {
    return changetype<SupplierUpdateSupplierOutStreamStruct>(this[8].toTuple());
  }

  get apy(): SupplierUpdateSupplierApyStruct {
    return changetype<SupplierUpdateSupplierApyStruct>(this[9].toTuple());
  }
}

export class SupplierUpdateSupplierOutStreamStruct extends ethereum.Tuple {
  get flow(): BigInt {
    return this[0].toBigInt();
  }

  get stepAmount(): BigInt {
    return this[1].toBigInt();
  }

  get stepTime(): BigInt {
    return this[2].toBigInt();
  }

  get initTime(): BigInt {
    return this[3].toBigInt();
  }

  get minBalance(): BigInt {
    return this[4].toBigInt();
  }

  get cancelWithdrawId(): Bytes {
    return this[5].toBytes();
  }
}

export class SupplierUpdateSupplierApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolV1__getLastPoolResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get yieldObject(): PoolV1__getLastPoolResultValue0YieldObjectStruct {
    return changetype<PoolV1__getLastPoolResultValue0YieldObjectStruct>(
      this[8].toTuple()
    );
  }

  get apy(): PoolV1__getLastPoolResultValue0ApyStruct {
    return changetype<PoolV1__getLastPoolResultValue0ApyStruct>(
      this[9].toTuple()
    );
  }
}

export class PoolV1__getLastPoolResultValue0YieldObjectStruct extends ethereum.Tuple {
  get yieldTokenIndex(): BigInt {
    return this[0].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[1].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[2].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[3].toBigInt();
  }

  get totalYield(): BigInt {
    return this[4].toBigInt();
  }

  get protocolYield(): BigInt {
    return this[5].toBigInt();
  }
}

export class PoolV1__getLastPoolResultValue0ApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolV1__getPoolResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get yieldObject(): PoolV1__getPoolResultValue0YieldObjectStruct {
    return changetype<PoolV1__getPoolResultValue0YieldObjectStruct>(
      this[8].toTuple()
    );
  }

  get apy(): PoolV1__getPoolResultValue0ApyStruct {
    return changetype<PoolV1__getPoolResultValue0ApyStruct>(this[9].toTuple());
  }
}

export class PoolV1__getPoolResultValue0YieldObjectStruct extends ethereum.Tuple {
  get yieldTokenIndex(): BigInt {
    return this[0].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[1].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[2].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[3].toBigInt();
  }

  get totalYield(): BigInt {
    return this[4].toBigInt();
  }

  get protocolYield(): BigInt {
    return this[5].toBigInt();
  }
}

export class PoolV1__getPoolResultValue0ApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolV1__getSupplierResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get supplier(): Address {
    return this[1].toAddress();
  }

  get cumulatedYield(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get createdTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get eventId(): BigInt {
    return this[6].toBigInt();
  }

  get inStream(): BigInt {
    return this[7].toBigInt();
  }

  get outStream(): PoolV1__getSupplierResultValue0OutStreamStruct {
    return changetype<PoolV1__getSupplierResultValue0OutStreamStruct>(
      this[8].toTuple()
    );
  }

  get apy(): PoolV1__getSupplierResultValue0ApyStruct {
    return changetype<PoolV1__getSupplierResultValue0ApyStruct>(
      this[9].toTuple()
    );
  }
}

export class PoolV1__getSupplierResultValue0OutStreamStruct extends ethereum.Tuple {
  get flow(): BigInt {
    return this[0].toBigInt();
  }

  get stepAmount(): BigInt {
    return this[1].toBigInt();
  }

  get stepTime(): BigInt {
    return this[2].toBigInt();
  }

  get initTime(): BigInt {
    return this[3].toBigInt();
  }

  get minBalance(): BigInt {
    return this[4].toBigInt();
  }

  get cancelWithdrawId(): Bytes {
    return this[5].toBytes();
  }
}

export class PoolV1__getSupplierResultValue0ApyStruct extends ethereum.Tuple {
  get span(): BigInt {
    return this[0].toBigInt();
  }

  get apy(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolV1 extends ethereum.SmartContract {
  static bind(address: Address): PoolV1 {
    return new PoolV1("PoolV1", address);
  }

  DEPOSIT_TRIGGER_AMOUNT(): BigInt {
    let result = super.call(
      "DEPOSIT_TRIGGER_AMOUNT",
      "DEPOSIT_TRIGGER_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DEPOSIT_TRIGGER_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEPOSIT_TRIGGER_AMOUNT",
      "DEPOSIT_TRIGGER_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BALANCE_TRIGGER_TIME(): BigInt {
    let result = super.call(
      "BALANCE_TRIGGER_TIME",
      "BALANCE_TRIGGER_TIME():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BALANCE_TRIGGER_TIME(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BALANCE_TRIGGER_TIME",
      "BALANCE_TRIGGER_TIME():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ETH(): Address {
    let result = super.call("ETH", "ETH():(address)", []);

    return result[0].toAddress();
  }

  try_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH", "ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MIN_OUTFLOW_ALLOWED(): BigInt {
    let result = super.call(
      "MIN_OUTFLOW_ALLOWED",
      "MIN_OUTFLOW_ALLOWED():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_OUTFLOW_ALLOWED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_OUTFLOW_ALLOWED",
      "MIN_OUTFLOW_ALLOWED():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  POOL_BUFFER(): BigInt {
    let result = super.call("POOL_BUFFER", "POOL_BUFFER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_POOL_BUFFER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("POOL_BUFFER", "POOL_BUFFER():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRECISSION(): BigInt {
    let result = super.call("PRECISSION", "PRECISSION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISSION", "PRECISSION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PROTOCOL_FEE(): BigInt {
    let result = super.call("PROTOCOL_FEE", "PROTOCOL_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PROTOCOL_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PROTOCOL_FEE", "PROTOCOL_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STEPS(): i32 {
    let result = super.call("STEPS", "STEPS():(uint8)", []);

    return result[0].toI32();
  }

  try_STEPS(): ethereum.CallResult<i32> {
    let result = super.tryCall("STEPS", "STEPS():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  SUPERFLUID_DEPOSIT(): BigInt {
    let result = super.call(
      "SUPERFLUID_DEPOSIT",
      "SUPERFLUID_DEPOSIT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SUPERFLUID_DEPOSIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SUPERFLUID_DEPOSIT",
      "SUPERFLUID_DEPOSIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_supplier: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_supplier)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_supplier: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_supplier)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  cfa(): Address {
    let result = super.call("cfa", "cfa():(address)", []);

    return result[0].toAddress();
  }

  try_cfa(): ethereum.CallResult<Address> {
    let result = super.tryCall("cfa", "cfa():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gelato(): Address {
    let result = super.call("gelato", "gelato():(address)", []);

    return result[0].toAddress();
  }

  try_gelato(): ethereum.CallResult<Address> {
    let result = super.tryCall("gelato", "gelato():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCodeAddress(): Address {
    let result = super.call("getCodeAddress", "getCodeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getCodeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCodeAddress",
      "getCodeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDepositTriggerAmount(): BigInt {
    let result = super.call(
      "getDepositTriggerAmount",
      "getDepositTriggerAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDepositTriggerAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositTriggerAmount",
      "getDepositTriggerAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositTriggerTime(): BigInt {
    let result = super.call(
      "getDepositTriggerTime",
      "getDepositTriggerTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDepositTriggerTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositTriggerTime",
      "getDepositTriggerTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastPool(): PoolV1__getLastPoolResultValue0Struct {
    let result = super.call(
      "getLastPool",
      "getLastPool():((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256)))",
      []
    );

    return changetype<PoolV1__getLastPoolResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getLastPool(): ethereum.CallResult<
    PoolV1__getLastPoolResultValue0Struct
  > {
    let result = super.tryCall(
      "getLastPool",
      "getLastPool():((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256)))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getLastPoolResultValue0Struct>(value[0].toTuple())
    );
  }

  getLastTimestamp(): BigInt {
    let result = super.call(
      "getLastTimestamp",
      "getLastTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTimestamp",
      "getLastTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(timestamp: BigInt): PoolV1__getPoolResultValue0Struct {
    let result = super.call(
      "getPool",
      "getPool(uint256):((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return changetype<PoolV1__getPoolResultValue0Struct>(result[0].toTuple());
  }

  try_getPool(
    timestamp: BigInt
  ): ethereum.CallResult<PoolV1__getPoolResultValue0Struct> {
    let result = super.tryCall(
      "getPool",
      "getPool(uint256):((uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getPoolResultValue0Struct>(value[0].toTuple())
    );
  }

  getPoolBuffer(): BigInt {
    let result = super.call("getPoolBuffer", "getPoolBuffer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolBuffer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolBuffer",
      "getPoolBuffer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrecission(): BigInt {
    let result = super.call("getPrecission", "getPrecission():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPrecission(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrecission",
      "getPrecission():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolFee(): BigInt {
    let result = super.call("getProtocolFee", "getProtocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getProtocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolFee",
      "getProtocolFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSteps(): i32 {
    let result = super.call("getSteps", "getSteps():(uint8)", []);

    return result[0].toI32();
  }

  try_getSteps(): ethereum.CallResult<i32> {
    let result = super.tryCall("getSteps", "getSteps():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getSuperfluidDeposit(): BigInt {
    let result = super.call(
      "getSuperfluidDeposit",
      "getSuperfluidDeposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSuperfluidDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSuperfluidDeposit",
      "getSuperfluidDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSupplier(_supplier: Address): PoolV1__getSupplierResultValue0Struct {
    let result = super.call(
      "getSupplier",
      "getSupplier(address):((uint256,address,uint256,uint256,uint256,uint256,uint256,int96,(int96,uint256,uint256,uint256,uint256,bytes32),(uint256,uint256)))",
      [ethereum.Value.fromAddress(_supplier)]
    );

    return changetype<PoolV1__getSupplierResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSupplier(
    _supplier: Address
  ): ethereum.CallResult<PoolV1__getSupplierResultValue0Struct> {
    let result = super.tryCall(
      "getSupplier",
      "getSupplier(address):((uint256,address,uint256,uint256,uint256,uint256,uint256,int96,(int96,uint256,uint256,uint256,uint256,bytes32),(uint256,uint256)))",
      [ethereum.Value.fromAddress(_supplier)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getSupplierResultValue0Struct>(value[0].toTuple())
    );
  }

  getVersion(): BigInt {
    let result = super.call("getVersion", "getVersion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVersion", "getVersion():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  host(): Address {
    let result = super.call("host", "host():(address)", []);

    return result[0].toAddress();
  }

  try_host(): ethereum.CallResult<Address> {
    let result = super.tryCall("host", "host():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ops(): Address {
    let result = super.call("ops", "ops():(address)", []);

    return result[0].toAddress();
  }

  try_ops(): ethereum.CallResult<Address> {
    let result = super.tryCall("ops", "ops():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolFactory(): Address {
    let result = super.call("poolFactory", "poolFactory():(address)", []);

    return result[0].toAddress();
  }

  try_poolFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolFactory", "poolFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sfDeleteFlowWithCtx(_ctx: Bytes, sender: Address, receiver: Address): Bytes {
    let result = super.call(
      "sfDeleteFlowWithCtx",
      "sfDeleteFlowWithCtx(bytes,address,address):(bytes)",
      [
        ethereum.Value.fromBytes(_ctx),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver)
      ]
    );

    return result[0].toBytes();
  }

  try_sfDeleteFlowWithCtx(
    _ctx: Bytes,
    sender: Address,
    receiver: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "sfDeleteFlowWithCtx",
      "sfDeleteFlowWithCtx(bytes,address,address):(bytes)",
      [
        ethereum.Value.fromBytes(_ctx),
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CloseAccountCall extends ethereum.Call {
  get inputs(): CloseAccountCall__Inputs {
    return new CloseAccountCall__Inputs(this);
  }

  get outputs(): CloseAccountCall__Outputs {
    return new CloseAccountCall__Outputs(this);
  }
}

export class CloseAccountCall__Inputs {
  _call: CloseAccountCall;

  constructor(call: CloseAccountCall) {
    this._call = call;
  }
}

export class CloseAccountCall__Outputs {
  _call: CloseAccountCall;

  constructor(call: CloseAccountCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get poolInit(): InitializeCallPoolInitStruct {
    return changetype<InitializeCallPoolInitStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallPoolInitStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get symbol(): string {
    return this[2].toString();
  }

  get host(): Address {
    return this[3].toAddress();
  }

  get superToken(): Address {
    return this[4].toAddress();
  }

  get token(): Address {
    return this[5].toAddress();
  }

  get poolInternal(): Address {
    return this[6].toAddress();
  }

  get poolStrategy(): Address {
    return this[7].toAddress();
  }

  get ops(): Address {
    return this[8].toAddress();
  }

  get owner(): Address {
    return this[9].toAddress();
  }
}

export class InternalPushToAAVECall extends ethereum.Call {
  get inputs(): InternalPushToAAVECall__Inputs {
    return new InternalPushToAAVECall__Inputs(this);
  }

  get outputs(): InternalPushToAAVECall__Outputs {
    return new InternalPushToAAVECall__Outputs(this);
  }
}

export class InternalPushToAAVECall__Inputs {
  _call: InternalPushToAAVECall;

  constructor(call: InternalPushToAAVECall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InternalPushToAAVECall__Outputs {
  _call: InternalPushToAAVECall;

  constructor(call: InternalPushToAAVECall) {
    this._call = call;
  }
}

export class InternalWithDrawStepCall extends ethereum.Call {
  get inputs(): InternalWithDrawStepCall__Inputs {
    return new InternalWithDrawStepCall__Inputs(this);
  }

  get outputs(): InternalWithDrawStepCall__Outputs {
    return new InternalWithDrawStepCall__Outputs(this);
  }
}

export class InternalWithDrawStepCall__Inputs {
  _call: InternalWithDrawStepCall;

  constructor(call: InternalWithDrawStepCall) {
    this._call = call;
  }

  get supplier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stepAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InternalWithDrawStepCall__Outputs {
  _call: InternalWithDrawStepCall;

  constructor(call: InternalWithDrawStepCall) {
    this._call = call;
  }
}

export class RedeemDepositCall extends ethereum.Call {
  get inputs(): RedeemDepositCall__Inputs {
    return new RedeemDepositCall__Inputs(this);
  }

  get outputs(): RedeemDepositCall__Outputs {
    return new RedeemDepositCall__Outputs(this);
  }
}

export class RedeemDepositCall__Inputs {
  _call: RedeemDepositCall;

  constructor(call: RedeemDepositCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemDepositCall__Outputs {
  _call: RedeemDepositCall;

  constructor(call: RedeemDepositCall) {
    this._call = call;
  }
}

export class RedeemFlowCall extends ethereum.Call {
  get inputs(): RedeemFlowCall__Inputs {
    return new RedeemFlowCall__Inputs(this);
  }

  get outputs(): RedeemFlowCall__Outputs {
    return new RedeemFlowCall__Outputs(this);
  }
}

export class RedeemFlowCall__Inputs {
  _call: RedeemFlowCall;

  constructor(call: RedeemFlowCall) {
    this._call = call;
  }

  get _outFlowRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemFlowCall__Outputs {
  _call: RedeemFlowCall;

  constructor(call: RedeemFlowCall) {
    this._call = call;
  }
}

export class RedeemFlowStopCall extends ethereum.Call {
  get inputs(): RedeemFlowStopCall__Inputs {
    return new RedeemFlowStopCall__Inputs(this);
  }

  get outputs(): RedeemFlowStopCall__Outputs {
    return new RedeemFlowStopCall__Outputs(this);
  }
}

export class RedeemFlowStopCall__Inputs {
  _call: RedeemFlowStopCall;

  constructor(call: RedeemFlowStopCall) {
    this._call = call;
  }
}

export class RedeemFlowStopCall__Outputs {
  _call: RedeemFlowStopCall;

  constructor(call: RedeemFlowStopCall) {
    this._call = call;
  }
}

export class SetDepositTriggerAmountCall extends ethereum.Call {
  get inputs(): SetDepositTriggerAmountCall__Inputs {
    return new SetDepositTriggerAmountCall__Inputs(this);
  }

  get outputs(): SetDepositTriggerAmountCall__Outputs {
    return new SetDepositTriggerAmountCall__Outputs(this);
  }
}

export class SetDepositTriggerAmountCall__Inputs {
  _call: SetDepositTriggerAmountCall;

  constructor(call: SetDepositTriggerAmountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositTriggerAmountCall__Outputs {
  _call: SetDepositTriggerAmountCall;

  constructor(call: SetDepositTriggerAmountCall) {
    this._call = call;
  }
}

export class SetDepositTriggerTimeCall extends ethereum.Call {
  get inputs(): SetDepositTriggerTimeCall__Inputs {
    return new SetDepositTriggerTimeCall__Inputs(this);
  }

  get outputs(): SetDepositTriggerTimeCall__Outputs {
    return new SetDepositTriggerTimeCall__Outputs(this);
  }
}

export class SetDepositTriggerTimeCall__Inputs {
  _call: SetDepositTriggerTimeCall;

  constructor(call: SetDepositTriggerTimeCall) {
    this._call = call;
  }

  get _time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositTriggerTimeCall__Outputs {
  _call: SetDepositTriggerTimeCall;

  constructor(call: SetDepositTriggerTimeCall) {
    this._call = call;
  }
}

export class SetPoolBufferCall extends ethereum.Call {
  get inputs(): SetPoolBufferCall__Inputs {
    return new SetPoolBufferCall__Inputs(this);
  }

  get outputs(): SetPoolBufferCall__Outputs {
    return new SetPoolBufferCall__Outputs(this);
  }
}

export class SetPoolBufferCall__Inputs {
  _call: SetPoolBufferCall;

  constructor(call: SetPoolBufferCall) {
    this._call = call;
  }

  get _poolBuffer(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPoolBufferCall__Outputs {
  _call: SetPoolBufferCall;

  constructor(call: SetPoolBufferCall) {
    this._call = call;
  }
}

export class SetPrecissionCall extends ethereum.Call {
  get inputs(): SetPrecissionCall__Inputs {
    return new SetPrecissionCall__Inputs(this);
  }

  get outputs(): SetPrecissionCall__Outputs {
    return new SetPrecissionCall__Outputs(this);
  }
}

export class SetPrecissionCall__Inputs {
  _call: SetPrecissionCall;

  constructor(call: SetPrecissionCall) {
    this._call = call;
  }

  get _precission(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPrecissionCall__Outputs {
  _call: SetPrecissionCall;

  constructor(call: SetPrecissionCall) {
    this._call = call;
  }
}

export class SetStepsCall extends ethereum.Call {
  get inputs(): SetStepsCall__Inputs {
    return new SetStepsCall__Inputs(this);
  }

  get outputs(): SetStepsCall__Outputs {
    return new SetStepsCall__Outputs(this);
  }
}

export class SetStepsCall__Inputs {
  _call: SetStepsCall;

  constructor(call: SetStepsCall) {
    this._call = call;
  }

  get _steps(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetStepsCall__Outputs {
  _call: SetStepsCall;

  constructor(call: SetStepsCall) {
    this._call = call;
  }
}

export class SetSuperfluidDepositCall extends ethereum.Call {
  get inputs(): SetSuperfluidDepositCall__Inputs {
    return new SetSuperfluidDepositCall__Inputs(this);
  }

  get outputs(): SetSuperfluidDepositCall__Outputs {
    return new SetSuperfluidDepositCall__Outputs(this);
  }
}

export class SetSuperfluidDepositCall__Inputs {
  _call: SetSuperfluidDepositCall;

  constructor(call: SetSuperfluidDepositCall) {
    this._call = call;
  }

  get _superfluidDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSuperfluidDepositCall__Outputs {
  _call: SetSuperfluidDepositCall;

  constructor(call: SetSuperfluidDepositCall) {
    this._call = call;
  }
}

export class SfCreateFlowCall extends ethereum.Call {
  get inputs(): SfCreateFlowCall__Inputs {
    return new SfCreateFlowCall__Inputs(this);
  }

  get outputs(): SfCreateFlowCall__Outputs {
    return new SfCreateFlowCall__Outputs(this);
  }
}

export class SfCreateFlowCall__Inputs {
  _call: SfCreateFlowCall;

  constructor(call: SfCreateFlowCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOutFlow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SfCreateFlowCall__Outputs {
  _call: SfCreateFlowCall;

  constructor(call: SfCreateFlowCall) {
    this._call = call;
  }
}

export class SfDeleteFlowCall extends ethereum.Call {
  get inputs(): SfDeleteFlowCall__Inputs {
    return new SfDeleteFlowCall__Inputs(this);
  }

  get outputs(): SfDeleteFlowCall__Outputs {
    return new SfDeleteFlowCall__Outputs(this);
  }
}

export class SfDeleteFlowCall__Inputs {
  _call: SfDeleteFlowCall;

  constructor(call: SfDeleteFlowCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SfDeleteFlowCall__Outputs {
  _call: SfDeleteFlowCall;

  constructor(call: SfDeleteFlowCall) {
    this._call = call;
  }
}

export class SfDeleteFlowWithCtxCall extends ethereum.Call {
  get inputs(): SfDeleteFlowWithCtxCall__Inputs {
    return new SfDeleteFlowWithCtxCall__Inputs(this);
  }

  get outputs(): SfDeleteFlowWithCtxCall__Outputs {
    return new SfDeleteFlowWithCtxCall__Outputs(this);
  }
}

export class SfDeleteFlowWithCtxCall__Inputs {
  _call: SfDeleteFlowWithCtxCall;

  constructor(call: SfDeleteFlowWithCtxCall) {
    this._call = call;
  }

  get _ctx(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SfDeleteFlowWithCtxCall__Outputs {
  _call: SfDeleteFlowWithCtxCall;

  constructor(call: SfDeleteFlowWithCtxCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SfUpdateFlowCall extends ethereum.Call {
  get inputs(): SfUpdateFlowCall__Inputs {
    return new SfUpdateFlowCall__Inputs(this);
  }

  get outputs(): SfUpdateFlowCall__Outputs {
    return new SfUpdateFlowCall__Outputs(this);
  }
}

export class SfUpdateFlowCall__Inputs {
  _call: SfUpdateFlowCall;

  constructor(call: SfUpdateFlowCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOutFlow(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SfUpdateFlowCall__Outputs {
  _call: SfUpdateFlowCall;

  constructor(call: SfUpdateFlowCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Transfer1Call extends ethereum.Call {
  get inputs(): Transfer1Call__Inputs {
    return new Transfer1Call__Inputs(this);
  }

  get outputs(): Transfer1Call__Outputs {
    return new Transfer1Call__Outputs(this);
  }
}

export class Transfer1Call__Inputs {
  _call: Transfer1Call;

  constructor(call: Transfer1Call) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Transfer1Call__Outputs {
  _call: Transfer1Call;

  constructor(call: Transfer1Call) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferSuperTokenCall extends ethereum.Call {
  get inputs(): TransferSuperTokenCall__Inputs {
    return new TransferSuperTokenCall__Inputs(this);
  }

  get outputs(): TransferSuperTokenCall__Outputs {
    return new TransferSuperTokenCall__Outputs(this);
  }
}

export class TransferSuperTokenCall__Inputs {
  _call: TransferSuperTokenCall;

  constructor(call: TransferSuperTokenCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferSuperTokenCall__Outputs {
  _call: TransferSuperTokenCall;

  constructor(call: TransferSuperTokenCall) {
    this._call = call;
  }
}

export class UpdateCodeCall extends ethereum.Call {
  get inputs(): UpdateCodeCall__Inputs {
    return new UpdateCodeCall__Inputs(this);
  }

  get outputs(): UpdateCodeCall__Outputs {
    return new UpdateCodeCall__Outputs(this);
  }
}

export class UpdateCodeCall__Inputs {
  _call: UpdateCodeCall;

  constructor(call: UpdateCodeCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCodeCall__Outputs {
  _call: UpdateCodeCall;

  constructor(call: UpdateCodeCall) {
    this._call = call;
  }
}
