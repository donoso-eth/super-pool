// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CodeUpdated extends ethereum.Event {
  get params(): CodeUpdated__Params {
    return new CodeUpdated__Params(this);
  }
}

export class CodeUpdated__Params {
  _event: CodeUpdated;

  constructor(event: CodeUpdated) {
    this._event = event;
  }

  get uuid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get codeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PoolUpdate extends ethereum.Event {
  get params(): PoolUpdate__Params {
    return new PoolUpdate__Params(this);
  }
}

export class PoolUpdate__Params {
  _event: PoolUpdate;

  constructor(event: PoolUpdate) {
    this._event = event;
  }

  get pool(): PoolUpdatePoolStruct {
    return changetype<PoolUpdatePoolStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class PoolUpdatePoolStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get depositFromOutFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[7].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[8].toBigInt();
  }

  get yieldObject(): PoolUpdatePoolYieldObjectStruct {
    return changetype<PoolUpdatePoolYieldObjectStruct>(this[9].toTuple());
  }
}

export class PoolUpdatePoolYieldObjectStruct extends ethereum.Tuple {
  get yieldTokenIndex(): BigInt {
    return this[0].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[1].toBigInt();
  }

  get yieldOutFlowRateIndex(): BigInt {
    return this[2].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[3].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[4].toBigInt();
  }

  get totalYield(): BigInt {
    return this[5].toBigInt();
  }

  get protocolYield(): BigInt {
    return this[6].toBigInt();
  }
}

export class SupplierEvent extends ethereum.Event {
  get params(): SupplierEvent__Params {
    return new SupplierEvent__Params(this);
  }
}

export class SupplierEvent__Params {
  _event: SupplierEvent;

  constructor(event: SupplierEvent) {
    this._event = event;
  }

  get supplierEvent(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get payload(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get timestmap(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get supplier(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SupplierUpdate extends ethereum.Event {
  get params(): SupplierUpdate__Params {
    return new SupplierUpdate__Params(this);
  }
}

export class SupplierUpdate__Params {
  _event: SupplierUpdate;

  constructor(event: SupplierUpdate) {
    this._event = event;
  }

  get supplier(): SupplierUpdateSupplierStruct {
    return changetype<SupplierUpdateSupplierStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class SupplierUpdateSupplierStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get supplier(): Address {
    return this[1].toAddress();
  }

  get deposit(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get inStream(): BigInt {
    return this[4].toBigInt();
  }

  get outStream(): SupplierUpdateSupplierOutStreamStruct {
    return changetype<SupplierUpdateSupplierOutStreamStruct>(this[5].toTuple());
  }
}

export class SupplierUpdateSupplierOutStreamStruct extends ethereum.Tuple {
  get flow(): BigInt {
    return this[0].toBigInt();
  }

  get streamDuration(): BigInt {
    return this[1].toBigInt();
  }

  get streamInit(): BigInt {
    return this[2].toBigInt();
  }

  get cancelWithdrawId(): Bytes {
    return this[3].toBytes();
  }
}

export class PoolV1___calculateIndexesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PoolV1___calculateIndexesInputLastPoolStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get depositFromOutFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[7].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[8].toBigInt();
  }

  get yieldObject(): PoolV1___calculateIndexesInputLastPoolYieldObjectStruct {
    return changetype<PoolV1___calculateIndexesInputLastPoolYieldObjectStruct>(
      this[9].toTuple()
    );
  }
}

export class PoolV1___calculateIndexesInputLastPoolYieldObjectStruct extends ethereum.Tuple {
  get yieldTokenIndex(): BigInt {
    return this[0].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[1].toBigInt();
  }

  get yieldOutFlowRateIndex(): BigInt {
    return this[2].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[3].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[4].toBigInt();
  }

  get totalYield(): BigInt {
    return this[5].toBigInt();
  }

  get protocolYield(): BigInt {
    return this[6].toBigInt();
  }
}

export class PoolV1__checkerLastExecutionResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class PoolV1__getLastPoolResultPoolStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get depositFromOutFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[7].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[8].toBigInt();
  }

  get yieldObject(): PoolV1__getLastPoolResultPoolYieldObjectStruct {
    return changetype<PoolV1__getLastPoolResultPoolYieldObjectStruct>(
      this[9].toTuple()
    );
  }
}

export class PoolV1__getLastPoolResultPoolYieldObjectStruct extends ethereum.Tuple {
  get yieldTokenIndex(): BigInt {
    return this[0].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[1].toBigInt();
  }

  get yieldOutFlowRateIndex(): BigInt {
    return this[2].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[3].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[4].toBigInt();
  }

  get totalYield(): BigInt {
    return this[5].toBigInt();
  }

  get protocolYield(): BigInt {
    return this[6].toBigInt();
  }
}

export class PoolV1__getPoolResultPoolStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nrSuppliers(): BigInt {
    return this[2].toBigInt();
  }

  get deposit(): BigInt {
    return this[3].toBigInt();
  }

  get depositFromInFlowRate(): BigInt {
    return this[4].toBigInt();
  }

  get depositFromOutFlowRate(): BigInt {
    return this[5].toBigInt();
  }

  get inFlowRate(): BigInt {
    return this[6].toBigInt();
  }

  get outFlowRate(): BigInt {
    return this[7].toBigInt();
  }

  get outFlowBuffer(): BigInt {
    return this[8].toBigInt();
  }

  get yieldObject(): PoolV1__getPoolResultPoolYieldObjectStruct {
    return changetype<PoolV1__getPoolResultPoolYieldObjectStruct>(
      this[9].toTuple()
    );
  }
}

export class PoolV1__getPoolResultPoolYieldObjectStruct extends ethereum.Tuple {
  get yieldTokenIndex(): BigInt {
    return this[0].toBigInt();
  }

  get yieldInFlowRateIndex(): BigInt {
    return this[1].toBigInt();
  }

  get yieldOutFlowRateIndex(): BigInt {
    return this[2].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[3].toBigInt();
  }

  get yieldSnapshot(): BigInt {
    return this[4].toBigInt();
  }

  get totalYield(): BigInt {
    return this[5].toBigInt();
  }

  get protocolYield(): BigInt {
    return this[6].toBigInt();
  }
}

export class PoolV1__getSupplierResultSupplierStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get supplier(): Address {
    return this[1].toAddress();
  }

  get deposit(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get inStream(): BigInt {
    return this[4].toBigInt();
  }

  get outStream(): PoolV1__getSupplierResultSupplierOutStreamStruct {
    return changetype<PoolV1__getSupplierResultSupplierOutStreamStruct>(
      this[5].toTuple()
    );
  }
}

export class PoolV1__getSupplierResultSupplierOutStreamStruct extends ethereum.Tuple {
  get flow(): BigInt {
    return this[0].toBigInt();
  }

  get streamDuration(): BigInt {
    return this[1].toBigInt();
  }

  get streamInit(): BigInt {
    return this[2].toBigInt();
  }

  get cancelWithdrawId(): Bytes {
    return this[3].toBytes();
  }
}

export class PoolV1 extends ethereum.SmartContract {
  static bind(address: Address): PoolV1 {
    return new PoolV1("PoolV1", address);
  }

  ETH(): Address {
    let result = super.call("ETH", "ETH():(address)", []);

    return result[0].toAddress();
  }

  try_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH", "ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _allowances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "_allowances",
      "_allowances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try__allowances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_allowances",
      "_allowances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _balances(param0: Address): BigInt {
    let result = super.call("_balances", "_balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try__balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_balances", "_balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _calculateIndexes(
    yieldPeriod: BigInt,
    lastPool: PoolV1___calculateIndexesInputLastPoolStruct
  ): PoolV1___calculateIndexesResult {
    let result = super.call(
      "_calculateIndexes",
      "_calculateIndexes(uint256,(uint256,uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256))):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(yieldPeriod),
        ethereum.Value.fromTuple(lastPool)
      ]
    );

    return new PoolV1___calculateIndexesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try__calculateIndexes(
    yieldPeriod: BigInt,
    lastPool: PoolV1___calculateIndexesInputLastPoolStruct
  ): ethereum.CallResult<PoolV1___calculateIndexesResult> {
    let result = super.tryCall(
      "_calculateIndexes",
      "_calculateIndexes(uint256,(uint256,uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256))):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(yieldPeriod),
        ethereum.Value.fromTuple(lastPool)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolV1___calculateIndexesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  _calculateYieldSupplier(_supplier: Address): BigInt {
    let result = super.call(
      "_calculateYieldSupplier",
      "_calculateYieldSupplier(address):(uint256)",
      [ethereum.Value.fromAddress(_supplier)]
    );

    return result[0].toBigInt();
  }

  try__calculateYieldSupplier(_supplier: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_calculateYieldSupplier",
      "_calculateYieldSupplier(address):(uint256)",
      [ethereum.Value.fromAddress(_supplier)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalSupply(): BigInt {
    let result = super.call("_totalSupply", "_totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalSupply", "_totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_supplier: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_supplier)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_supplier: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_supplier)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceTreasuryTask(): Bytes {
    let result = super.call(
      "balanceTreasuryTask",
      "balanceTreasuryTask():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_balanceTreasuryTask(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "balanceTreasuryTask",
      "balanceTreasuryTask():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  checkerLastExecution(): PoolV1__checkerLastExecutionResult {
    let result = super.call(
      "checkerLastExecution",
      "checkerLastExecution():(bool,bytes)",
      []
    );

    return new PoolV1__checkerLastExecutionResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkerLastExecution(): ethereum.CallResult<
    PoolV1__checkerLastExecutionResult
  > {
    let result = super.tryCall(
      "checkerLastExecution",
      "checkerLastExecution():(bool,bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolV1__checkerLastExecutionResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gelato(): Address {
    let result = super.call("gelato", "gelato():(address)", []);

    return result[0].toAddress();
  }

  try_gelato(): ethereum.CallResult<Address> {
    let result = super.tryCall("gelato", "gelato():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCodeAddress(): Address {
    let result = super.call("getCodeAddress", "getCodeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getCodeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCodeAddress",
      "getCodeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLastPool(): PoolV1__getLastPoolResultPoolStruct {
    let result = super.call(
      "getLastPool",
      "getLastPool():((uint256,uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256)))",
      []
    );

    return changetype<PoolV1__getLastPoolResultPoolStruct>(result[0].toTuple());
  }

  try_getLastPool(): ethereum.CallResult<PoolV1__getLastPoolResultPoolStruct> {
    let result = super.tryCall(
      "getLastPool",
      "getLastPool():((uint256,uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256)))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getLastPoolResultPoolStruct>(value[0].toTuple())
    );
  }

  getLastTimestamp(): BigInt {
    let result = super.call(
      "getLastTimestamp",
      "getLastTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTimestamp",
      "getLastTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPool(timestamp: BigInt): PoolV1__getPoolResultPoolStruct {
    let result = super.call(
      "getPool",
      "getPool(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return changetype<PoolV1__getPoolResultPoolStruct>(result[0].toTuple());
  }

  try_getPool(
    timestamp: BigInt
  ): ethereum.CallResult<PoolV1__getPoolResultPoolStruct> {
    let result = super.tryCall(
      "getPool",
      "getPool(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,int96,int96,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getPoolResultPoolStruct>(value[0].toTuple())
    );
  }

  getSupplier(_supplier: Address): PoolV1__getSupplierResultSupplierStruct {
    let result = super.call(
      "getSupplier",
      "getSupplier(address):((uint256,address,uint256,uint256,int96,(int96,uint256,uint256,bytes32)))",
      [ethereum.Value.fromAddress(_supplier)]
    );

    return changetype<PoolV1__getSupplierResultSupplierStruct>(
      result[0].toTuple()
    );
  }

  try_getSupplier(
    _supplier: Address
  ): ethereum.CallResult<PoolV1__getSupplierResultSupplierStruct> {
    let result = super.tryCall(
      "getSupplier",
      "getSupplier(address):((uint256,address,uint256,uint256,int96,(int96,uint256,uint256,bytes32)))",
      [ethereum.Value.fromAddress(_supplier)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolV1__getSupplierResultSupplierStruct>(value[0].toTuple())
    );
  }

  getVersion(): BigInt {
    let result = super.call("getVersion", "getVersion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVersion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVersion", "getVersion():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ops(): Address {
    let result = super.call("ops", "ops():(address)", []);

    return result[0].toAddress();
  }

  try_ops(): ethereum.CallResult<Address> {
    let result = super.tryCall("ops", "ops():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolInternal(): Address {
    let result = super.call("poolInternal", "poolInternal():(address)", []);

    return result[0].toAddress();
  }

  try_poolInternal(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolInternal", "poolInternal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolStrategy(): Address {
    let result = super.call("poolStrategy", "poolStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_poolStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolStrategy", "poolStrategy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  readStorageSlot(i: i32): Bytes {
    let result = super.call(
      "readStorageSlot",
      "readStorageSlot(uint8):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(i))]
    );

    return result[0].toBytes();
  }

  try_readStorageSlot(i: i32): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "readStorageSlot",
      "readStorageSlot(uint8):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(i))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalYieldEarnedSupplier(
    _supplier: Address,
    currentYieldSnapshot: BigInt
  ): BigInt {
    let result = super.call(
      "totalYieldEarnedSupplier",
      "totalYieldEarnedSupplier(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_supplier),
        ethereum.Value.fromUnsignedBigInt(currentYieldSnapshot)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalYieldEarnedSupplier(
    _supplier: Address,
    currentYieldSnapshot: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalYieldEarnedSupplier",
      "totalYieldEarnedSupplier(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_supplier),
        ethereum.Value.fromUnsignedBigInt(currentYieldSnapshot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdraw(): boolean {
    let result = super.call("withdraw", "withdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BalanceTreasuryCall extends ethereum.Call {
  get inputs(): BalanceTreasuryCall__Inputs {
    return new BalanceTreasuryCall__Inputs(this);
  }

  get outputs(): BalanceTreasuryCall__Outputs {
    return new BalanceTreasuryCall__Outputs(this);
  }
}

export class BalanceTreasuryCall__Inputs {
  _call: BalanceTreasuryCall;

  constructor(call: BalanceTreasuryCall) {
    this._call = call;
  }
}

export class BalanceTreasuryCall__Outputs {
  _call: BalanceTreasuryCall;

  constructor(call: BalanceTreasuryCall) {
    this._call = call;
  }
}

export class CloseAccountCall extends ethereum.Call {
  get inputs(): CloseAccountCall__Inputs {
    return new CloseAccountCall__Inputs(this);
  }

  get outputs(): CloseAccountCall__Outputs {
    return new CloseAccountCall__Outputs(this);
  }
}

export class CloseAccountCall__Inputs {
  _call: CloseAccountCall;

  constructor(call: CloseAccountCall) {
    this._call = call;
  }
}

export class CloseAccountCall__Outputs {
  _call: CloseAccountCall;

  constructor(call: CloseAccountCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EmergencyCloseStreamCall extends ethereum.Call {
  get inputs(): EmergencyCloseStreamCall__Inputs {
    return new EmergencyCloseStreamCall__Inputs(this);
  }

  get outputs(): EmergencyCloseStreamCall__Outputs {
    return new EmergencyCloseStreamCall__Outputs(this);
  }
}

export class EmergencyCloseStreamCall__Inputs {
  _call: EmergencyCloseStreamCall;

  constructor(call: EmergencyCloseStreamCall) {
    this._call = call;
  }

  get sender(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get receiver(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class EmergencyCloseStreamCall__Outputs {
  _call: EmergencyCloseStreamCall;

  constructor(call: EmergencyCloseStreamCall) {
    this._call = call;
  }
}

export class EmergencyUpdateBalanceSuppplierCall extends ethereum.Call {
  get inputs(): EmergencyUpdateBalanceSuppplierCall__Inputs {
    return new EmergencyUpdateBalanceSuppplierCall__Inputs(this);
  }

  get outputs(): EmergencyUpdateBalanceSuppplierCall__Outputs {
    return new EmergencyUpdateBalanceSuppplierCall__Outputs(this);
  }
}

export class EmergencyUpdateBalanceSuppplierCall__Inputs {
  _call: EmergencyUpdateBalanceSuppplierCall;

  constructor(call: EmergencyUpdateBalanceSuppplierCall) {
    this._call = call;
  }

  get suppliers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get balances(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class EmergencyUpdateBalanceSuppplierCall__Outputs {
  _call: EmergencyUpdateBalanceSuppplierCall;

  constructor(call: EmergencyUpdateBalanceSuppplierCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get poolInit(): InitializeCallPoolInitStruct {
    return changetype<InitializeCallPoolInitStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallPoolInitStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get symbol(): string {
    return this[2].toString();
  }

  get host(): Address {
    return this[3].toAddress();
  }

  get superToken(): Address {
    return this[4].toAddress();
  }

  get token(): Address {
    return this[5].toAddress();
  }

  get poolInternal(): Address {
    return this[6].toAddress();
  }

  get poolStrategy(): Address {
    return this[7].toAddress();
  }

  get ops(): Address {
    return this[8].toAddress();
  }

  get owner(): Address {
    return this[9].toAddress();
  }
}

export class RedeemDepositCall extends ethereum.Call {
  get inputs(): RedeemDepositCall__Inputs {
    return new RedeemDepositCall__Inputs(this);
  }

  get outputs(): RedeemDepositCall__Outputs {
    return new RedeemDepositCall__Outputs(this);
  }
}

export class RedeemDepositCall__Inputs {
  _call: RedeemDepositCall;

  constructor(call: RedeemDepositCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemDepositCall__Outputs {
  _call: RedeemDepositCall;

  constructor(call: RedeemDepositCall) {
    this._call = call;
  }
}

export class RedeemFlowCall extends ethereum.Call {
  get inputs(): RedeemFlowCall__Inputs {
    return new RedeemFlowCall__Inputs(this);
  }

  get outputs(): RedeemFlowCall__Outputs {
    return new RedeemFlowCall__Outputs(this);
  }
}

export class RedeemFlowCall__Inputs {
  _call: RedeemFlowCall;

  constructor(call: RedeemFlowCall) {
    this._call = call;
  }

  get _outFlowRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemFlowCall__Outputs {
  _call: RedeemFlowCall;

  constructor(call: RedeemFlowCall) {
    this._call = call;
  }
}

export class RedeemFlowStopCall extends ethereum.Call {
  get inputs(): RedeemFlowStopCall__Inputs {
    return new RedeemFlowStopCall__Inputs(this);
  }

  get outputs(): RedeemFlowStopCall__Outputs {
    return new RedeemFlowStopCall__Outputs(this);
  }
}

export class RedeemFlowStopCall__Inputs {
  _call: RedeemFlowStopCall;

  constructor(call: RedeemFlowStopCall) {
    this._call = call;
  }
}

export class RedeemFlowStopCall__Outputs {
  _call: RedeemFlowStopCall;

  constructor(call: RedeemFlowStopCall) {
    this._call = call;
  }
}

export class SetEmergencyCall extends ethereum.Call {
  get inputs(): SetEmergencyCall__Inputs {
    return new SetEmergencyCall__Inputs(this);
  }

  get outputs(): SetEmergencyCall__Outputs {
    return new SetEmergencyCall__Outputs(this);
  }
}

export class SetEmergencyCall__Inputs {
  _call: SetEmergencyCall;

  constructor(call: SetEmergencyCall) {
    this._call = call;
  }

  get _emergency(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyCall__Outputs {
  _call: SetEmergencyCall;

  constructor(call: SetEmergencyCall) {
    this._call = call;
  }
}

export class SetInternalContractCall extends ethereum.Call {
  get inputs(): SetInternalContractCall__Inputs {
    return new SetInternalContractCall__Inputs(this);
  }

  get outputs(): SetInternalContractCall__Outputs {
    return new SetInternalContractCall__Outputs(this);
  }
}

export class SetInternalContractCall__Inputs {
  _call: SetInternalContractCall;

  constructor(call: SetInternalContractCall) {
    this._call = call;
  }

  get _poolInternal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetInternalContractCall__Outputs {
  _call: SetInternalContractCall;

  constructor(call: SetInternalContractCall) {
    this._call = call;
  }
}

export class TaskCloseCall extends ethereum.Call {
  get inputs(): TaskCloseCall__Inputs {
    return new TaskCloseCall__Inputs(this);
  }

  get outputs(): TaskCloseCall__Outputs {
    return new TaskCloseCall__Outputs(this);
  }
}

export class TaskCloseCall__Inputs {
  _call: TaskCloseCall;

  constructor(call: TaskCloseCall) {
    this._call = call;
  }

  get _supplier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TaskCloseCall__Outputs {
  _call: TaskCloseCall;

  constructor(call: TaskCloseCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateCodeCall extends ethereum.Call {
  get inputs(): UpdateCodeCall__Inputs {
    return new UpdateCodeCall__Inputs(this);
  }

  get outputs(): UpdateCodeCall__Outputs {
    return new UpdateCodeCall__Outputs(this);
  }
}

export class UpdateCodeCall__Inputs {
  _call: UpdateCodeCall;

  constructor(call: UpdateCodeCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCodeCall__Outputs {
  _call: UpdateCodeCall;

  constructor(call: UpdateCodeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
