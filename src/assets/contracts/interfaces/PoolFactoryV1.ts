/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PeriodStruct = {
  timestamp: BigNumberish;
  deposit: BigNumberish;
  inFlowRate: BigNumberish;
  outFlowRate: BigNumberish;
  depositFromInFlowRate: BigNumberish;
  depositFromOutFlowRate: BigNumberish;
  yieldTokenIndex: BigNumberish;
  yieldInFlowRateIndex: BigNumberish;
  yieldOutFlowRateIndex: BigNumberish;
  yieldAccruedSec: BigNumberish;
  totalShares: BigNumberish;
  outFlowAssetsRate: BigNumberish;
};

export type PeriodStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  timestamp: BigNumber;
  deposit: BigNumber;
  inFlowRate: BigNumber;
  outFlowRate: BigNumber;
  depositFromInFlowRate: BigNumber;
  depositFromOutFlowRate: BigNumber;
  yieldTokenIndex: BigNumber;
  yieldInFlowRateIndex: BigNumber;
  yieldOutFlowRateIndex: BigNumber;
  yieldAccruedSec: BigNumber;
  totalShares: BigNumber;
  outFlowAssetsRate: BigNumber;
};

export type PoolFactoryInitializerStruct = {
  host: string;
  superToken: string;
  ops: string;
};

export type PoolFactoryInitializerStructOutput = [string, string, string] & {
  host: string;
  superToken: string;
  ops: string;
};

export type StreamStruct = { flow: BigNumberish; cancelTaskId: BytesLike };

export type StreamStructOutput = [BigNumber, string] & {
  flow: BigNumber;
  cancelTaskId: string;
};

export type DepositStruct = {
  amount: BigNumberish;
  totalSupplied: BigNumberish;
};

export type DepositStructOutput = [BigNumber, BigNumber] & {
  amount: BigNumber;
  totalSupplied: BigNumber;
};

export interface PoolFactoryV1Interface extends utils.Interface {
  functions: {
    "ETH()": FunctionFragment;
    "MIN_OUTFLOW_ALLOWED()": FunctionFragment;
    "PRECISSION()": FunctionFragment;
    "_poolUpdateCurrentState()": FunctionFragment;
    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "cancelTask(bytes32)": FunctionFragment;
    "cfa()": FunctionFragment;
    "checkerStopStream(address,bool,uint8)": FunctionFragment;
    "closeAccount()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "gelato()": FunctionFragment;
    "getPeriod(uint256)": FunctionFragment;
    "host()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize((address,address,address))": FunctionFragment;
    "lastPeriodTimestamp()": FunctionFragment;
    "mockPoolUpdate()": FunctionFragment;
    "mockYield(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ops()": FunctionFragment;
    "parseLoanData(bytes)": FunctionFragment;
    "periodByTimestamp(uint256)": FunctionFragment;
    "periodId()": FunctionFragment;
    "periodTimestampById(uint256)": FunctionFragment;
    "redeemDeposit(uint256)": FunctionFragment;
    "redeemFlow(int96,uint256)": FunctionFragment;
    "redeemFlowStop()": FunctionFragment;
    "stopstream(address,bool,uint8)": FunctionFragment;
    "supplierId()": FunctionFragment;
    "suppliersByAddress(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "totalBalanceSupplier(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalYieldEarnedSupplier(address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_OUTFLOW_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_poolUpdateCurrentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "cfa", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkerStopStream",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PoolFactoryInitializerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPeriodTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockPoolUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseLoanData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "periodByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "periodId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodTimestampById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFlow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFlowStop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopstream",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplierId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "suppliersByAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalanceSupplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalYieldEarnedSupplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_OUTFLOW_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_poolUpdateCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cfa", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkerStopStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPeriodTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockPoolUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mockYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseLoanData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "periodId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodTimestampById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFlowStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopstream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplierId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suppliersByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalanceSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalYieldEarnedSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PoolFactoryV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolFactoryV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH(overrides?: CallOverrides): Promise<[string]>;

    MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _shares: BigNumber }>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cfa(overrides?: CallOverrides): Promise<[string]>;

    checkerStopStream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gelato(overrides?: CallOverrides): Promise<[string]>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PeriodStructOutput]>;

    host(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastPeriodTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockPoolUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mockYield(
      _yield: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ops(overrides?: CallOverrides): Promise<[string]>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { endSeconds: BigNumber }>;

    periodByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        deposit: BigNumber;
        inFlowRate: BigNumber;
        outFlowRate: BigNumber;
        depositFromInFlowRate: BigNumber;
        depositFromOutFlowRate: BigNumber;
        yieldTokenIndex: BigNumber;
        yieldInFlowRateIndex: BigNumber;
        yieldOutFlowRateIndex: BigNumber;
        yieldAccruedSec: BigNumber;
        totalShares: BigNumber;
        outFlowAssetsRate: BigNumber;
      }
    >;

    periodId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    periodTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemFlowStop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplierId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        StreamStructOutput,
        StreamStructOutput,
        StreamStructOutput,
        DepositStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        supplier: string;
        supplierId: BigNumber;
        cumulatedYield: BigNumber;
        inStream: StreamStructOutput;
        outStream: StreamStructOutput;
        outAssets: StreamStructOutput;
        deposit: DepositStructOutput;
        shares: BigNumber;
        timestamp: BigNumber;
        createdTimestamp: BigNumber;
        eventId: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBalanceSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yieldSupplier: BigNumber }>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH(overrides?: CallOverrides): Promise<string>;

  MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISSION(overrides?: CallOverrides): Promise<BigNumber>;

  _poolUpdateCurrentState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementCreated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementUpdated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(_supplier: string, overrides?: CallOverrides): Promise<BigNumber>;

  beforeAgreementCreated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementUpdated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelTask(
    _taskId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cfa(overrides?: CallOverrides): Promise<string>;

  checkerStopStream(
    _receiver: string,
    _all: boolean,
    _flowType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gelato(overrides?: CallOverrides): Promise<string>;

  getPeriod(
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PeriodStructOutput>;

  host(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    poolFactoryInitializer: PoolFactoryInitializerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastPeriodTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  mockPoolUpdate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mockYield(
    _yield: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ops(overrides?: CallOverrides): Promise<string>;

  parseLoanData(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  periodByTimestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      timestamp: BigNumber;
      deposit: BigNumber;
      inFlowRate: BigNumber;
      outFlowRate: BigNumber;
      depositFromInFlowRate: BigNumber;
      depositFromOutFlowRate: BigNumber;
      yieldTokenIndex: BigNumber;
      yieldInFlowRateIndex: BigNumber;
      yieldOutFlowRateIndex: BigNumber;
      yieldAccruedSec: BigNumber;
      totalShares: BigNumber;
      outFlowAssetsRate: BigNumber;
    }
  >;

  periodId(overrides?: CallOverrides): Promise<BigNumber>;

  periodTimestampById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemDeposit(
    redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemFlow(
    _outFlowRate: BigNumberish,
    _endSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemFlowStop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopstream(
    _receiver: string,
    _all: boolean,
    _flowType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplierId(overrides?: CallOverrides): Promise<BigNumber>;

  suppliersByAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      StreamStructOutput,
      StreamStructOutput,
      StreamStructOutput,
      DepositStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      supplier: string;
      supplierId: BigNumber;
      cumulatedYield: BigNumber;
      inStream: StreamStructOutput;
      outStream: StreamStructOutput;
      outAssets: StreamStructOutput;
      deposit: DepositStructOutput;
      shares: BigNumber;
      timestamp: BigNumber;
      createdTimestamp: BigNumber;
      eventId: BigNumber;
    }
  >;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokensReceived(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBalanceSupplier(
    _supplier: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalYieldEarnedSupplier(
    _supplier: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH(overrides?: CallOverrides): Promise<string>;

    MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _poolUpdateCurrentState(overrides?: CallOverrides): Promise<void>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_supplier: string, overrides?: CallOverrides): Promise<BigNumber>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelTask(_taskId: BytesLike, overrides?: CallOverrides): Promise<void>;

    cfa(overrides?: CallOverrides): Promise<string>;

    checkerStopStream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    closeAccount(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gelato(overrides?: CallOverrides): Promise<string>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PeriodStructOutput>;

    host(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lastPeriodTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    mockPoolUpdate(overrides?: CallOverrides): Promise<void>;

    mockYield(_yield: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ops(overrides?: CallOverrides): Promise<string>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        timestamp: BigNumber;
        deposit: BigNumber;
        inFlowRate: BigNumber;
        outFlowRate: BigNumber;
        depositFromInFlowRate: BigNumber;
        depositFromOutFlowRate: BigNumber;
        yieldTokenIndex: BigNumber;
        yieldInFlowRateIndex: BigNumber;
        yieldOutFlowRateIndex: BigNumber;
        yieldAccruedSec: BigNumber;
        totalShares: BigNumber;
        outFlowAssetsRate: BigNumber;
      }
    >;

    periodId(overrides?: CallOverrides): Promise<BigNumber>;

    periodTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFlowStop(overrides?: CallOverrides): Promise<void>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplierId(overrides?: CallOverrides): Promise<BigNumber>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        StreamStructOutput,
        StreamStructOutput,
        StreamStructOutput,
        DepositStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        supplier: string;
        supplierId: BigNumber;
        cumulatedYield: BigNumber;
        inStream: StreamStructOutput;
        outStream: StreamStructOutput;
        outAssets: StreamStructOutput;
        deposit: DepositStructOutput;
        shares: BigNumber;
        timestamp: BigNumber;
        createdTimestamp: BigNumber;
        eventId: BigNumber;
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBalanceSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(_supplier: string, overrides?: CallOverrides): Promise<BigNumber>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cfa(overrides?: CallOverrides): Promise<BigNumber>;

    checkerStopStream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastPeriodTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    mockPoolUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mockYield(
      _yield: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    periodId(overrides?: CallOverrides): Promise<BigNumber>;

    periodTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemFlowStop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplierId(overrides?: CallOverrides): Promise<BigNumber>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBalanceSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_OUTFLOW_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cfa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkerStopStream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastPeriodTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockPoolUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mockYield(
      _yield: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    periodId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemFlowStop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplierId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBalanceSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
