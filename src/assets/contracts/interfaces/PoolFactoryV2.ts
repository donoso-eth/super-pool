/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type APYStruct = { span: BigNumberish; apy: BigNumberish };

export type APYStructOutput = [BigNumber, BigNumber] & {
  span: BigNumber;
  apy: BigNumber;
};

export type PoolV2Struct = {
  id: BigNumberish;
  timestamp: BigNumberish;
  totalShares: BigNumberish;
  deposit: BigNumberish;
  depositFromInFlowRate: BigNumberish;
  inFlowRate: BigNumberish;
  outFlowRate: BigNumberish;
  outFlowAssetsRate: BigNumberish;
  yieldTokenIndex: BigNumberish;
  yieldInFlowRateIndex: BigNumberish;
  yieldAccrued: BigNumberish;
  yieldSnapshot: BigNumberish;
  totalYield: BigNumberish;
  apy: APYStruct;
};

export type PoolV2StructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  APYStructOutput
] & {
  id: BigNumber;
  timestamp: BigNumber;
  totalShares: BigNumber;
  deposit: BigNumber;
  depositFromInFlowRate: BigNumber;
  inFlowRate: BigNumber;
  outFlowRate: BigNumber;
  outFlowAssetsRate: BigNumber;
  yieldTokenIndex: BigNumber;
  yieldInFlowRateIndex: BigNumber;
  yieldAccrued: BigNumber;
  yieldSnapshot: BigNumber;
  totalYield: BigNumber;
  apy: APYStructOutput;
};

export type StreamStruct = { flow: BigNumberish; cancelTaskId: BytesLike };

export type StreamStructOutput = [BigNumber, string] & {
  flow: BigNumber;
  cancelTaskId: string;
};

export type OutAssetsStruct = {
  flow: BigNumberish;
  cancelTaskId: BytesLike;
  stepAmount: BigNumberish;
  stepTime: BigNumberish;
  cancelWithdrawId: BytesLike;
};

export type OutAssetsStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  flow: BigNumber;
  cancelTaskId: string;
  stepAmount: BigNumber;
  stepTime: BigNumber;
  cancelWithdrawId: string;
};

export type SupplierStruct = {
  id: BigNumberish;
  supplier: string;
  cumulatedYield: BigNumberish;
  inStream: StreamStruct;
  outStream: StreamStruct;
  outAssets: OutAssetsStruct;
  deposit: BigNumberish;
  shares: BigNumberish;
  timestamp: BigNumberish;
  createdTimestamp: BigNumberish;
  eventId: BigNumberish;
  apy: APYStruct;
};

export type SupplierStructOutput = [
  BigNumber,
  string,
  BigNumber,
  StreamStructOutput,
  StreamStructOutput,
  OutAssetsStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  APYStructOutput
] & {
  id: BigNumber;
  supplier: string;
  cumulatedYield: BigNumber;
  inStream: StreamStructOutput;
  outStream: StreamStructOutput;
  outAssets: OutAssetsStructOutput;
  deposit: BigNumber;
  shares: BigNumber;
  timestamp: BigNumber;
  createdTimestamp: BigNumber;
  eventId: BigNumber;
  apy: APYStructOutput;
};

export type PoolFactoryInitializerStruct = {
  host: string;
  superToken: string;
  ops: string;
  token: string;
  sToken: string;
  poolStrategy: string;
  gelatoTasks: string;
  settings: string;
};

export type PoolFactoryInitializerStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  host: string;
  superToken: string;
  ops: string;
  token: string;
  sToken: string;
  poolStrategy: string;
  gelatoTasks: string;
  settings: string;
};

export interface PoolFactoryV2Interface extends utils.Interface {
  functions: {
    "DEPOSIT_TRIGGER_AMOUNT()": FunctionFragment;
    "DEPOSIT_TRIGGER_TIME()": FunctionFragment;
    "ETH()": FunctionFragment;
    "MIN_OUTFLOW_ALLOWED()": FunctionFragment;
    "PARTIAL_DEPOSIT()": FunctionFragment;
    "POOL_BUFFER()": FunctionFragment;
    "_poolUpdateCurrentState()": FunctionFragment;
    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "cancelTask(bytes32)": FunctionFragment;
    "cfa()": FunctionFragment;
    "closeAccount()": FunctionFragment;
    "gelato()": FunctionFragment;
    "getLastPool()": FunctionFragment;
    "getPool(uint256)": FunctionFragment;
    "getSupplierByAdress(address)": FunctionFragment;
    "host()": FunctionFragment;
    "initialize((address,address,address,address,address,address,address,address))": FunctionFragment;
    "lastPoolTimestamp()": FunctionFragment;
    "ops()": FunctionFragment;
    "parseLoanData(bytes)": FunctionFragment;
    "poolByTimestamp(uint256)": FunctionFragment;
    "poolId()": FunctionFragment;
    "poolTimestampById(uint256)": FunctionFragment;
    "poolUpdate()": FunctionFragment;
    "poolUpdateCurrentState()": FunctionFragment;
    "pushedToStrategy(uint256)": FunctionFragment;
    "redeemDeposit(uint256)": FunctionFragment;
    "redeemFlow(int96,uint256)": FunctionFragment;
    "redeemFlowStop()": FunctionFragment;
    "stopstream(address,bool,uint8)": FunctionFragment;
    "supplierId()": FunctionFragment;
    "supplierUpdateCurrentState(address)": FunctionFragment;
    "suppliersByAddress(address)": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "totalYieldEarnedSupplier(address)": FunctionFragment;
    "transfer(uint256,address)": FunctionFragment;
    "updateSupplierDeposit(address,uint256,uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawStep(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEPOSIT_TRIGGER_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSIT_TRIGGER_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_OUTFLOW_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARTIAL_DEPOSIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_poolUpdateCurrentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "cfa", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplierByAdress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PoolFactoryInitializerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPoolTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseLoanData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolTimestampById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolUpdateCurrentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushedToStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFlow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFlowStop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopstream",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplierId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplierUpdateCurrentState",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "suppliersByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalYieldEarnedSupplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSupplierDeposit",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStep",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEPOSIT_TRIGGER_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSIT_TRIGGER_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_OUTFLOW_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARTIAL_DEPOSIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_BUFFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_poolUpdateCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cfa", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupplierByAdress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPoolTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseLoanData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolTimestampById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolUpdateCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushedToStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFlow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFlowStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopstream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplierId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplierUpdateCurrentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suppliersByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalYieldEarnedSupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSupplierDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStep",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PoolFactoryV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolFactoryV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPOSIT_TRIGGER_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPOSIT_TRIGGER_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETH(overrides?: CallOverrides): Promise<[string]>;

    MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<[BigNumber]>;

    PARTIAL_DEPOSIT(overrides?: CallOverrides): Promise<[number]>;

    POOL_BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    _poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cfa(overrides?: CallOverrides): Promise<[string]>;

    closeAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gelato(overrides?: CallOverrides): Promise<[string]>;

    getLastPool(overrides?: CallOverrides): Promise<[PoolV2StructOutput]>;

    getPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PoolV2StructOutput]>;

    getSupplierByAdress(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[SupplierStructOutput] & { supplier: SupplierStructOutput }>;

    host(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastPoolTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    ops(overrides?: CallOverrides): Promise<[string]>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { endSeconds: BigNumber }>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        APYStructOutput
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        totalShares: BigNumber;
        deposit: BigNumber;
        depositFromInFlowRate: BigNumber;
        inFlowRate: BigNumber;
        outFlowRate: BigNumber;
        outFlowAssetsRate: BigNumber;
        yieldTokenIndex: BigNumber;
        yieldInFlowRateIndex: BigNumber;
        yieldAccrued: BigNumber;
        yieldSnapshot: BigNumber;
        totalYield: BigNumber;
        apy: APYStructOutput;
      }
    >;

    poolId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    poolTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushedToStrategy(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemFlowStop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplierId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    supplierUpdateCurrentState(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        StreamStructOutput,
        StreamStructOutput,
        OutAssetsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        APYStructOutput
      ] & {
        id: BigNumber;
        supplier: string;
        cumulatedYield: BigNumber;
        inStream: StreamStructOutput;
        outStream: StreamStructOutput;
        outAssets: OutAssetsStructOutput;
        deposit: BigNumber;
        shares: BigNumber;
        timestamp: BigNumber;
        createdTimestamp: BigNumber;
        eventId: BigNumber;
        apy: APYStructOutput;
      }
    >;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yieldSupplier: BigNumber }>;

    transfer(
      _amount: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSupplierDeposit(
      _supplier: string,
      inDeposit: BigNumberish,
      outDeposit: BigNumberish,
      outAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStep(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEPOSIT_TRIGGER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  DEPOSIT_TRIGGER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  ETH(overrides?: CallOverrides): Promise<string>;

  MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

  PARTIAL_DEPOSIT(overrides?: CallOverrides): Promise<number>;

  POOL_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  _poolUpdateCurrentState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementCreated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementUpdated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeAgreementCreated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementUpdated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelTask(
    _taskId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cfa(overrides?: CallOverrides): Promise<string>;

  closeAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gelato(overrides?: CallOverrides): Promise<string>;

  getLastPool(overrides?: CallOverrides): Promise<PoolV2StructOutput>;

  getPool(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PoolV2StructOutput>;

  getSupplierByAdress(
    _supplier: string,
    overrides?: CallOverrides
  ): Promise<SupplierStructOutput>;

  host(overrides?: CallOverrides): Promise<string>;

  initialize(
    poolFactoryInitializer: PoolFactoryInitializerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastPoolTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  ops(overrides?: CallOverrides): Promise<string>;

  parseLoanData(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  poolByTimestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      APYStructOutput
    ] & {
      id: BigNumber;
      timestamp: BigNumber;
      totalShares: BigNumber;
      deposit: BigNumber;
      depositFromInFlowRate: BigNumber;
      inFlowRate: BigNumber;
      outFlowRate: BigNumber;
      outFlowAssetsRate: BigNumber;
      yieldTokenIndex: BigNumber;
      yieldInFlowRateIndex: BigNumber;
      yieldAccrued: BigNumber;
      yieldSnapshot: BigNumber;
      totalYield: BigNumber;
      apy: APYStructOutput;
    }
  >;

  poolId(overrides?: CallOverrides): Promise<BigNumber>;

  poolTimestampById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolUpdate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolUpdateCurrentState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushedToStrategy(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemDeposit(
    redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemFlow(
    _outFlowRate: BigNumberish,
    _endSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemFlowStop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopstream(
    _receiver: string,
    _all: boolean,
    _flowType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplierId(overrides?: CallOverrides): Promise<BigNumber>;

  supplierUpdateCurrentState(
    _supplier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  suppliersByAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      StreamStructOutput,
      StreamStructOutput,
      OutAssetsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      APYStructOutput
    ] & {
      id: BigNumber;
      supplier: string;
      cumulatedYield: BigNumber;
      inStream: StreamStructOutput;
      outStream: StreamStructOutput;
      outAssets: OutAssetsStructOutput;
      deposit: BigNumber;
      shares: BigNumber;
      timestamp: BigNumber;
      createdTimestamp: BigNumber;
      eventId: BigNumber;
      apy: APYStructOutput;
    }
  >;

  tokensReceived(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalYieldEarnedSupplier(
    _supplier: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    _amount: BigNumberish,
    _paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSupplierDeposit(
    _supplier: string,
    inDeposit: BigNumberish,
    outDeposit: BigNumberish,
    outAssets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStep(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEPOSIT_TRIGGER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_TRIGGER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    ETH(overrides?: CallOverrides): Promise<string>;

    MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    PARTIAL_DEPOSIT(overrides?: CallOverrides): Promise<number>;

    POOL_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    _poolUpdateCurrentState(overrides?: CallOverrides): Promise<void>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelTask(_taskId: BytesLike, overrides?: CallOverrides): Promise<void>;

    cfa(overrides?: CallOverrides): Promise<string>;

    closeAccount(overrides?: CallOverrides): Promise<void>;

    gelato(overrides?: CallOverrides): Promise<string>;

    getLastPool(overrides?: CallOverrides): Promise<PoolV2StructOutput>;

    getPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PoolV2StructOutput>;

    getSupplierByAdress(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<SupplierStructOutput>;

    host(overrides?: CallOverrides): Promise<string>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    lastPoolTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<string>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        APYStructOutput
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        totalShares: BigNumber;
        deposit: BigNumber;
        depositFromInFlowRate: BigNumber;
        inFlowRate: BigNumber;
        outFlowRate: BigNumber;
        outFlowAssetsRate: BigNumber;
        yieldTokenIndex: BigNumber;
        yieldInFlowRateIndex: BigNumber;
        yieldAccrued: BigNumber;
        yieldSnapshot: BigNumber;
        totalYield: BigNumber;
        apy: APYStructOutput;
      }
    >;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    poolTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolUpdate(overrides?: CallOverrides): Promise<void>;

    poolUpdateCurrentState(overrides?: CallOverrides): Promise<void>;

    pushedToStrategy(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFlowStop(overrides?: CallOverrides): Promise<void>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplierId(overrides?: CallOverrides): Promise<BigNumber>;

    supplierUpdateCurrentState(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        StreamStructOutput,
        StreamStructOutput,
        OutAssetsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        APYStructOutput
      ] & {
        id: BigNumber;
        supplier: string;
        cumulatedYield: BigNumber;
        inStream: StreamStructOutput;
        outStream: StreamStructOutput;
        outAssets: OutAssetsStructOutput;
        deposit: BigNumber;
        shares: BigNumber;
        timestamp: BigNumber;
        createdTimestamp: BigNumber;
        eventId: BigNumber;
        apy: APYStructOutput;
      }
    >;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _amount: BigNumberish,
      _paymentToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSupplierDeposit(
      _supplier: string,
      inDeposit: BigNumberish,
      outDeposit: BigNumberish,
      outAssets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;

    withdrawStep(_receiver: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    DEPOSIT_TRIGGER_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_TRIGGER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_OUTFLOW_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    PARTIAL_DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    _poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cfa(overrides?: CallOverrides): Promise<BigNumber>;

    closeAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPool(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupplierByAdress(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastPoolTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    poolTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushedToStrategy(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemFlowStop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplierId(overrides?: CallOverrides): Promise<BigNumber>;

    supplierUpdateCurrentState(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _amount: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSupplierDeposit(
      _supplier: string,
      inDeposit: BigNumberish,
      outDeposit: BigNumberish,
      outAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStep(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSIT_TRIGGER_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPOSIT_TRIGGER_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_OUTFLOW_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PARTIAL_DEPOSIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_BUFFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cfa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplierByAdress(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      poolFactoryInitializer: PoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastPoolTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTimestampById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolUpdateCurrentState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushedToStrategy(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemDeposit(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemFlow(
      _outFlowRate: BigNumberish,
      _endSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemFlowStop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopstream(
      _receiver: string,
      _all: boolean,
      _flowType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplierId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplierUpdateCurrentState(
      _supplier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    suppliersByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalYieldEarnedSupplier(
      _supplier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _amount: BigNumberish,
      _paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSupplierDeposit(
      _supplier: string,
      inDeposit: BigNumberish,
      outDeposit: BigNumberish,
      outAssets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStep(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
