/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type CreatePoolInputStruct = {
  superToken: string;
  poolStrategy: string;
};

export type CreatePoolInputStructOutput = [string, string] & {
  superToken: string;
  poolStrategy: string;
};

export type PoolInfoStruct = {
  id: BigNumberish;
  idPerSupertoken: BigNumberish;
  superToken: string;
  strategy: string;
  pool: string;
  poolInternal: string;
};

export type PoolInfoStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string
] & {
  id: BigNumber;
  idPerSupertoken: BigNumber;
  superToken: string;
  strategy: string;
  pool: string;
  poolInternal: string;
};

export type SuperPoolFactoryInitializerStruct = {
  host: string;
  poolImpl: string;
  poolInternalImpl: string;
  ops: string;
};

export type SuperPoolFactoryInitializerStructOutput = [
  string,
  string,
  string,
  string
] & { host: string; poolImpl: string; poolInternalImpl: string; ops: string };

export interface SuperPoolFactoryInterface extends utils.Interface {
  functions: {
    "changePoolImplementation(address,address,address)": FunctionFragment;
    "changePoolInternalImplementation(address,address,address)": FunctionFragment;
    "createSuperPool((address,address))": FunctionFragment;
    "getCodeAddress()": FunctionFragment;
    "getRecordBySuperTokenAddress(address,address)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initialize((address,address,address,address))": FunctionFragment;
    "poolIdBySuperTokenAndId(address,uint256)": FunctionFragment;
    "poolIdBySuperTokenStrategy(address,address)": FunctionFragment;
    "poolInfoById(uint256)": FunctionFragment;
    "pools()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "updateCode(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changePoolImplementation",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changePoolInternalImplementation",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSuperPool",
    values: [CreatePoolInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCodeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordBySuperTokenAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [SuperPoolFactoryInitializerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIdBySuperTokenAndId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIdBySuperTokenStrategy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfoById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateCode", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "changePoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePoolInternalImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSuperPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordBySuperTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolIdBySuperTokenAndId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolIdBySuperTokenStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolInfoById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCode", data: BytesLike): Result;

  events: {
    "CodeUpdated(bytes32,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CodeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type CodeUpdatedEvent = TypedEvent<
  [string, string],
  { uuid: string; codeAddress: string }
>;

export type CodeUpdatedEventFilter = TypedEventFilter<CodeUpdatedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SuperPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SuperPoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changePoolImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePoolInternalImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSuperPool(
      poolInput: CreatePoolInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCodeAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { codeAddress: string }>;

    getRecordBySuperTokenAddress(
      _superToken: string,
      _poolStrategy: string,
      overrides?: CallOverrides
    ): Promise<[PoolInfoStructOutput] & { poolInfo: PoolInfoStructOutput }>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      factoryInitializer: SuperPoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolIdBySuperTokenAndId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolIdBySuperTokenStrategy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfoById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, string] & {
        id: BigNumber;
        idPerSupertoken: BigNumber;
        superToken: string;
        strategy: string;
        pool: string;
        poolInternal: string;
      }
    >;

    pools(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    updateCode(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changePoolImplementation(
    newImpl: string,
    superToken: string,
    poolStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePoolInternalImplementation(
    newImpl: string,
    superToken: string,
    poolStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSuperPool(
    poolInput: CreatePoolInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCodeAddress(overrides?: CallOverrides): Promise<string>;

  getRecordBySuperTokenAddress(
    _superToken: string,
    _poolStrategy: string,
    overrides?: CallOverrides
  ): Promise<PoolInfoStructOutput>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    factoryInitializer: SuperPoolFactoryInitializerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolIdBySuperTokenAndId(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolIdBySuperTokenStrategy(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfoById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string, string] & {
      id: BigNumber;
      idPerSupertoken: BigNumber;
      superToken: string;
      strategy: string;
      pool: string;
      poolInternal: string;
    }
  >;

  pools(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  updateCode(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changePoolImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changePoolInternalImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createSuperPool(
      poolInput: CreatePoolInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getCodeAddress(overrides?: CallOverrides): Promise<string>;

    getRecordBySuperTokenAddress(
      _superToken: string,
      _poolStrategy: string,
      overrides?: CallOverrides
    ): Promise<PoolInfoStructOutput>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      factoryInitializer: SuperPoolFactoryInitializerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    poolIdBySuperTokenAndId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIdBySuperTokenStrategy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfoById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, string] & {
        id: BigNumber;
        idPerSupertoken: BigNumber;
        superToken: string;
        strategy: string;
        pool: string;
        poolInternal: string;
      }
    >;

    pools(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    updateCode(newAddress: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CodeUpdated(bytes32,address)"(
      uuid?: null,
      codeAddress?: null
    ): CodeUpdatedEventFilter;
    CodeUpdated(uuid?: null, codeAddress?: null): CodeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    changePoolImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePoolInternalImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSuperPool(
      poolInput: CreatePoolInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCodeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRecordBySuperTokenAddress(
      _superToken: string,
      _poolStrategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      factoryInitializer: SuperPoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolIdBySuperTokenAndId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIdBySuperTokenStrategy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfoById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    updateCode(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changePoolImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePoolInternalImplementation(
      newImpl: string,
      superToken: string,
      poolStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSuperPool(
      poolInput: CreatePoolInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCodeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecordBySuperTokenAddress(
      _superToken: string,
      _poolStrategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      factoryInitializer: SuperPoolFactoryInitializerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolIdBySuperTokenAndId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolIdBySuperTokenStrategy(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfoById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCode(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
