/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SuperPoolInputStruct = {
  poolFactoryImpl: string;
  sTokenImpl: string;
  superToken: string;
  ops: string;
  token: string;
  poolStrategy: string;
  gelatoResolver: string;
  settings: string;
};

export type SuperPoolInputStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  poolFactoryImpl: string;
  sTokenImpl: string;
  superToken: string;
  ops: string;
  token: string;
  poolStrategy: string;
  gelatoResolver: string;
  settings: string;
};

export type SupertokenResolverStruct = { pool: string; sToken: string };

export type SupertokenResolverStructOutput = [string, string] & {
  pool: string;
  sToken: string;
};

export interface SuperPoolHostInterface extends utils.Interface {
  functions: {
    "_pcrTokensIssued()": FunctionFragment;
    "createSuperPool((address,address,address,address,address,address,address,address))": FunctionFragment;
    "getResolverBySuperToken(address)": FunctionFragment;
    "superTokenResolverByAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_pcrTokensIssued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSuperPool",
    values: [SuperPoolInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getResolverBySuperToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "superTokenResolverByAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_pcrTokensIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSuperPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResolverBySuperToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "superTokenResolverByAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SuperPoolHost extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SuperPoolHostInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _pcrTokensIssued(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    createSuperPool(
      superPoolInput: SuperPoolInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getResolverBySuperToken(
      superToken: string,
      overrides?: CallOverrides
    ): Promise<
      [SupertokenResolverStructOutput] & {
        resolver: SupertokenResolverStructOutput;
      }
    >;

    superTokenResolverByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pool: string; sToken: string }>;
  };

  _pcrTokensIssued(overrides?: CallOverrides): Promise<BigNumber>;

  createSuperPool(
    superPoolInput: SuperPoolInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getResolverBySuperToken(
    superToken: string,
    overrides?: CallOverrides
  ): Promise<SupertokenResolverStructOutput>;

  superTokenResolverByAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { pool: string; sToken: string }>;

  callStatic: {
    _pcrTokensIssued(overrides?: CallOverrides): Promise<BigNumber>;

    createSuperPool(
      superPoolInput: SuperPoolInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getResolverBySuperToken(
      superToken: string,
      overrides?: CallOverrides
    ): Promise<SupertokenResolverStructOutput>;

    superTokenResolverByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { pool: string; sToken: string }>;
  };

  filters: {};

  estimateGas: {
    _pcrTokensIssued(overrides?: CallOverrides): Promise<BigNumber>;

    createSuperPool(
      superPoolInput: SuperPoolInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getResolverBySuperToken(
      superToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    superTokenResolverByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _pcrTokensIssued(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSuperPool(
      superPoolInput: SuperPoolInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getResolverBySuperToken(
      superToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    superTokenResolverByAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
